import matplotlib.pyplot as plt
from matplotlib.ticker import MaxNLocator
import matplotlib as mpl
mpl.rcParams['lines.linewidth'] = 1.5
mpl.rcParams['lines.markersize'] = 7
mpl.rcParams['lines.markeredgewidth'] = 1.5
mpl.rcParams['font.size'] = 15
mpl.rcParams['axes.labelsize'] = 16
mpl.rcParams['legend.fontsize'] = 11

def add_inner_title(title, loc, ax=None, size=None, **kwargs):
    if ax == None:
        ax = plt.gca()
    from matplotlib.offsetbox import AnchoredText
    from matplotlib.patheffects import withStroke
    if size is None:
        size = dict(size=plt.rcParams['legend.fontsize'])
    else:
        size = dict(size=size)
    at = AnchoredText(title, loc=loc, prop=size, pad=0.7, borderpad=0.5, frameon=False, **kwargs)
    ax.add_artist(at)
    at.txt._text.set_path_effects([withStroke(foreground="w", linewidth=3)])
    return at

def plot_models_scores(xlabel, xvalues, result_dict_list, doshow=False, logscale=False, title=None):
    if logscale:
        pltfunc = plt.semilogx
    else:
        pltfunc = plt.plot
    plt.figure()
    plt.errorbar(xvalues, [rd['valid_score']['accuracy']['mean'] for rd in result_dict_list],
        c='m', marker='o', linestyle='--', mec="m", mfc="w", label='4-CV accuracy',
        yerr=[rd['valid_score']['accuracy']['std'] for rd in result_dict_list]
        )
    plt.errorbar(xvalues, [rd['valid_score']['TPR']['mean'] for rd in result_dict_list],
        c='c', marker='o', linestyle='--', mec="c", mfc="w", label='4-CV TPR',
        yerr=[rd['valid_score']['TPR']['std'] for rd in result_dict_list]
        )
    plt.errorbar(xvalues, [rd['valid_score']['TNR']['mean'] for rd in result_dict_list],
        c='y', marker='o', linestyle='--', mec="y", mfc="w", label='4-CV TNR',
        yerr=[rd['valid_score']['TNR']['std'] for rd in result_dict_list]
        )

    pltfunc(xvalues, [rd['test_score']['accuracy'] for rd in result_dict_list], 'ro-', mec="r", mfc="r", label='test accuracy')
    pltfunc(xvalues, [rd['test_score']['TPR'] for rd in result_dict_list], 'bo-', mec="b", mfc="b", label='test TPR')
    pltfunc(xvalues, [rd['test_score']['TNR'] for rd in result_dict_list], 'go-', mec="g", mfc="g", label='test TNR')

    plt.legend(loc=0, framealpha=0.6)
    plt.xlabel(xlabel)
    if title is not None:
        plt.title(title)
    if doshow:
        plt.show()

def plot_models_scores_axes(ax, xvalues, result_dict_list, logscale=False):
    if logscale:
        pltfunc = ax.semilogx
    else:
        pltfunc = ax.plot
    ax.errorbar(xvalues, [rd['valid_score']['accuracy']['mean'] for rd in result_dict_list],
        c='m', marker='o', linestyle='--', mec="m", mfc="w", label='4-CV accuracy',
        yerr=[rd['valid_score']['accuracy']['std'] for rd in result_dict_list]
        )
    ax.errorbar(xvalues, [rd['valid_score']['TPR']['mean'] for rd in result_dict_list],
        c='c', marker='o', linestyle='--', mec="c", mfc="w", label='4-CV TPR',
        yerr=[rd['valid_score']['TPR']['std'] for rd in result_dict_list]
        )
    ax.errorbar(xvalues, [rd['valid_score']['TNR']['mean'] for rd in result_dict_list],
        c='y', marker='o', linestyle='--', mec="y", mfc="w", label='4-CV TNR',
        yerr=[rd['valid_score']['TNR']['std'] for rd in result_dict_list]
        )

    pltfunc(xvalues, [rd['test_score']['accuracy'] for rd in result_dict_list], 'ro-', mec="r", mfc="r", label='test accuracy')
    pltfunc(xvalues, [rd['test_score']['TPR'] for rd in result_dict_list], 'bo-', mec="b", mfc="b", label='test TPR')
    pltfunc(xvalues, [rd['test_score']['TNR'] for rd in result_dict_list], 'go-', mec="g", mfc="g", label='test TNR')

def plot_models_roc_axes(ax, model_names, styles, result_dict_list):
    for model_name, result_dict, style in zip(model_names, result_dict_list, styles):
        ax.plot(result_dict['roc']['fpr'], result_dict['roc']['tpr'], style, label=model_name)





